name: PR Size Notifier

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-pr-size:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate PR size and comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.FORKED_REPO_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            // Ï†úÏô∏Ìï† ÌååÏùº Ìå®ÌÑ¥ (ÌîÑÎ°†Ìä∏ + Î∞±ÏóîÎìú)
            const excludedPatterns = [
              /^frontend\/package-lock\.json$/, /^frontend\/.*\.lock$/, /^docs\//,
              /^backend\/.*\/target\//, /^backend\/.*\/build\//, 
              /^backend\/.*\/pom\.xml$/, /^backend\/.*\/build\.gradle/, /^backend\/.*\/settings\.gradle/,
              /^backend\/.*\.(properties|yml|yaml)$/, 
              /^frontend\/public\//, /^frontend\/src\/assets\//
            ];

            const totalAdditions = files
              .filter(file => !excludedPatterns.some(pattern => pattern.test(file.filename)))
              .reduce((sum, file) => sum + file.additions, 0);

            let sizeLabel, message;


            if (totalAdditions <= 50) {
              sizeLabel = 'XS';
              message = `‚úÖ ÏûëÏùÄ Î≥ÄÍ≤ΩÏûÖÎãàÎã§. (${totalAdditions}Ï§Ñ) Îπ†Î•¥Í≤å Î¶¨Î∑∞Ìï† Ïàò ÏûàÏñ¥Ïöî.`;
            } else if (totalAdditions <= 200) {
              sizeLabel = 'S';
              message = `üëç Ï†ÅÏ†àÌïú ÌÅ¨Í∏∞ÏûÖÎãàÎã§. (${totalAdditions}Ï§Ñ) Î¶¨Î∑∞ÌïòÍ∏∞ Ï¢ãÎÑ§Ïöî.`;
            } else if (totalAdditions <= 500) {
              sizeLabel = 'M';
              message = `‚ÑπÔ∏è Îã§ÏÜå ÌÅ∞ PRÏûÖÎãàÎã§. (${totalAdditions}Ï§Ñ) ÏßëÏ§ëÌï¥ÏÑú Î¶¨Î∑∞Ìï¥ Ï£ºÏÑ∏Ïöî.`;
            } else if (totalAdditions <= 1000) {
              sizeLabel = 'L';
              message = `‚ö†Ô∏è ÌÅ∞ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏûÖÎãàÎã§. (${totalAdditions}Ï§Ñ) Î¶¨Î∑∞Ïóê ÏãúÍ∞ÑÏù¥ Ï¢Ä Í±∏Î¶¥ Ïàò ÏûàÏñ¥Ïöî.`;
            } else {
              sizeLabel = 'XL';
              message = `üö® Îß§Ïö∞ ÌÅ∞ PRÏûÖÎãàÎã§. (${totalAdditions}Ï§Ñ) Í∞ÄÎä•ÌïòÎã§Î©¥ ÏûëÏóÖÏùÑ ÎÇòÎà†ÏÑú Ï†úÏ∂úÌï¥ Ï£ºÏÑ∏Ïöî.`;
            }


            // Í∏∞Ï°¥ ÏΩîÎ©òÌä∏ ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });

            const botComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('PR ÌÅ¨Í∏∞ Ï≤¥ÌÅ¨ Í≤∞Í≥º'));
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `### üîç PR ÌÅ¨Í∏∞ Ï≤¥ÌÅ¨ Í≤∞Í≥º (${sizeLabel})\n${message}`
            });
