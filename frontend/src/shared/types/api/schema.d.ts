/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/recruits': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 고객의 동행 신청
     * @description 로그인한 고객이 동행을 신청합니다.
     */
    post: operations['createRecruit'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/applications/{applicationId}/select': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 지원 선택
     * @description 특정 신청에 대한 지원들 중 하나를 선택합니다.
     */
    post: operations['selectApplication'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 신청 취소
     * @description recruitId에 해당하는 신청을 취소합니다.
     */
    patch: operations['cancelRecruit'];
    trace?: never;
  };
  '/api/reviews/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 동행 신청을 담당한 도우미의 리뷰 조회
     * @description 특정 동행 신청을 담당한 도우미의 리뷰를 조회합니다.
     */
    get: operations['getReviewAsRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/reports/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 동행 신청에 대한 리포트 상세 정보 조회
     * @description 특정 동행 신청에 대한 리포트의 상세 정보를 조회합니다.
     */
    get: operations['getReportAsRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 동행 신청의 상세 정보 조회
     * @description recruitId에 해당하는 동행 신청의 상세 정보를 조회합니다.
     */
    get: operations['getRecruitDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}/payments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 동행 신청의 결제 정보 조회
     * @description recruitId에 해당하는 동행 신청의 결제 정보를 조회합니다.
     */
    get: operations['getRecruitPayment'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/customer': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 고객의 동행 목록 조회
     * @description 로그인한 고객이 신청한 동행 목록(진행중/완료)을 조회합니다.
     */
    get: operations['getRecruitListAsCustomer'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/helpers/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 도우미 상세 조회
     * @description userId에 해당하는 도우미의 상세 정보를 조회합니다.
     */
    get: operations['getHelperDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/helpers/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 신청에 지원한 도우미 목록 조회
     * @description 특정 신청에 지원한 도우미 목록을 조회합니다.
     */
    get: operations['getHelperListAsRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/applications/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 신청에 대한 지원 목록 조회
     * @description 특정 신청에 대한 지원 목록을 조회합니다.
     */
    get: operations['getApplicationListAsRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description 동행 신청 요청 DTO */
    RecruitCreateRequest: {
      /**
       * @description 환자 이미지 URL
       * @example https://example.com/patient.png
       */
      imageUrl?: string;
      /**
       * @description 환자 이름
       * @example 홍길동
       */
      name?: string;
      /**
       * Format: int32
       * @description 환자 나이
       * @example 81
       */
      age?: number;
      /**
       * @description 환자 성별
       * @example GENDER.MALE
       * @enum {string}
       */
      gender?: 'MALE' | 'FEMALE';
      /**
       * @description 환자 연락처
       * @example 010-1234-5678
       */
      phoneNumber?: string;
      /**
       * @description 부축이 필요한지
       * @example true
       */
      needsHelping?: boolean;
      /**
       * @description 휠체어를 이용하고 있는지
       * @example true
       */
      usesWheelchair?: boolean;
      /**
       * @description 인지능력 이슈가 있는지
       * @example true
       */
      hasCognitiveIssue?: boolean;
      /**
       * @description 인지능력 이슈가 있다면, 디테일 설명
       * @example ['판단에 도움이 필요해요', '기억하거나 이해하는 것이 어려워요]
       */
      cognitiveIssueDetail?: string;
      /**
       * @description 의사소통 이슈가 있는지
       * @example true
       */
      hasCommunicationIssue?: boolean;
      /**
       * @description 의사소통 이슈가 있다면, 디테일 설명
       * @example 이가 많이 없으셔서.. 천천히 이야기 들어주세요
       */
      communicationIssueDetail?: string;
      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate?: string;
      /**
       * @description 만나는 시각
       * @example 09:30:00
       */
      estimatedMeetingTime?: string;
      /**
       * @description 복귀 시각
       * @example 12:30:00
       */
      estimatedReturnTime?: string;
      /** @description 만나는 장소 */
      meetingLocation?: string;
      /**
       * @description 만나는 장소에 대한 추가 정보
       * @example 103동 402호 현관 앞
       */
      meetingLocationInfo?: string;
      /** @description 목적지 병원 */
      destination?: string;
      /**
       * @description 방문하실 과
       * @example 내과
       */
      destinationDetail?: string;
      /** @description 복귀 장소 */
      returnLocation?: string;
      /**
       * @description 복귀 장소에 대한 추가 정보
       * @example 103동 402호 현관 앞
       */
      returnLocationDetail?: string;
      /**
       * @description 동행 목적
       * @example 정기 진료
       */
      purpose?: string;
      /**
       * @description 기타 요청사항
       * @example 약 수령도 대신 부탁드립니다.
       */
      extraRequest?: string;
    };
    /** @description 공통 응답 포맷 */
    Response: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code?: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status?: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message?: string;
      /** @description 응답 body 필드 */
      data?: unknown;
    };
    /** @description 동행 목록 조회 응답 DTO */
    RecruitListResponse: {
      /** @description 진행 중인 동행 목록 */
      inProgressList?: components['schemas']['RecruitSimpleResponse'][];
      /** @description 완료된 동행 목록 */
      completedList?: components['schemas']['RecruitSimpleResponse'][];
    };
    /** @description 동행 신청 정보 요약본 응답 DTO */
    RecruitSimpleResponse: {
      /**
       * Format: int64
       * @description 동행 신청 ID
       */
      recruitId?: number;
      /**
       * Format: int64
       * @description 동행중인 경우, 동행 ID
       */
      escortId?: number;
      /**
       * @description 동행 신청의 진행 상태
       * @enum {string}
       */
      status?: 'MATCHING' | 'COMPLETED' | 'IN_PROGRESS' | 'DONE';
      /**
       * Format: int64
       * @description 지원한 도우미 수
       */
      numberOfApplication?: number;
      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate?: string;
      /**
       * @description 만나는 시각
       * @example 09:30:00
       */
      estimatedMeetingTime?: string;
      /**
       * @description 복귀 시각
       * @example 12:30:00
       */
      estimatedReturnTime?: string;
      /** @description 만나는 장소 */
      departureLocation?: string;
      /** @description 목적지 병원 */
      destination?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  createRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['RecruitCreateRequest'];
      };
    };
    responses: {
      /** @description 동행 목록 신청 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  selectApplication: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        applicationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지원 선택 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  cancelRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 신청 취소 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Response'];
        };
      };
    };
  };
  getReviewAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 도우미 리뷰 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getReportAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 리포트 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getRecruitDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 신청 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getRecruitPayment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 신청 결제 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getRecruitListAsCustomer: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RecruitListResponse'];
        };
      };
    };
  };
  getHelperDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 도우미 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getHelperListAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 도우미 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
  getApplicationListAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지원 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Response'];
        };
      };
    };
  };
}
