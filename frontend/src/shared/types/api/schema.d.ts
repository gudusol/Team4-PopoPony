/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/reports/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 동행 신청에 대한 리포트 상세 정보 조회
     * @description 특정 동행 신청에 대한 리포트의 상세 정보를 조회합니다.
     */
    get: operations['getReportAsRecruit'];
    put?: never;
    /**
     * 동행 신청에 대한 리포트 등록
     * @description 특정 동행 신청에 대한 리포트를 등록합니다.
     */
    post: operations['createReportOnRecruit'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 동행 지원 목록 검색
     * @description 지역 및 날짜에 해당하는 동행 지원 목록을 검색합니다. datetime의 입력 형식 값은 (yyyy-mm-dd)입니다.
     */
    get: operations['getRecruitListBySearch'];
    put?: never;
    /**
     * 고객의 동행 신청
     * @description 로그인한 고객이 동행을 신청합니다.
     */
    post: operations['createRecruit'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/helpers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 도우미 프로필 등록
     * @description 도우미의 프로필을 등록합니다.
     */
    post: operations['createHelperProfile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/applications/{applicationId}/select': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 지원 선택
     * @description 특정 신청에 대한 지원들 중 하나를 선택합니다.
     */
    post: operations['selectApplication'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/applications/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 신청에 대한 지원 목록 조회
     * @description 특정 신청에 대한 지원 목록을 조회합니다.
     */
    get: operations['getApplicationListAsRecruit'];
    put?: never;
    /**
     * 동행(일감) 지원하기
     * @description 로그인한 도우미가 동행에 지원합니다. recruitId를 통해 지원할 동행(일감)을 선택합니다.
     */
    post: operations['applyApplicationToRecruit'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 동행 신청 취소
     * @description recruitId에 해당하는 동행 신청을 취소합니다.
     */
    patch: operations['cancelRecruit'];
    trace?: never;
  };
  '/api/applications/{applicationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 동행(일감) 취소하기
     * @description 로그인한 도우미가 동행(일감)을 취소합니다. recruitId를 통해 취소할 동행(일감)을 선택합니다.
     */
    patch: operations['cancelApplicationToRecruit'];
    trace?: never;
  };
  '/api/reviews/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 동행 신청을 담당한 도우미의 리뷰 조회
     * @description 특정 동행 신청을 담당한 도우미의 리뷰를 조회합니다.
     */
    get: operations['getReviewAsRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/reports/recruits/{recruitId}/default': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 리포트 등록에 필요한 기본값 조회
     * @description 리포트를 등록에 필요한 기본값을 조회합니다.
     */
    get: operations['getReportDefaultValueOnRecruit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 동행 신청의 상세 정보 조회
     * @description recruitId에 해당하는 동행 신청의 상세 정보를 조회합니다.
     */
    get: operations['getRecruitDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}/payments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 동행 신청의 결제 정보 조회
     * @description recruitId에 해당하는 동행 신청의 결제 정보를 조회합니다.
     */
    get: operations['getRecruitPayment'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/{recruitId}/history': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이전 환자(동행) 기록 불러오기
     * @description 로그인한 고객이 이전에 동행했던 환자(동행)에 대한 기록을 불러옵니다.
     */
    get: operations['getRecruitHistory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/patients': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이전 환자(동행) 정보 목록 불러오기
     * @description 로그인한 고객이 이전에 동행했던 환자(동행) 정보 목록을 조회합니다.
     */
    get: operations['getRecruitHistoryList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/helper': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 도우미의 동행 목록 조회
     * @description 로그인한 도우미가 신청한 동행 목록(진행중/완료)을 조회합니다.
     */
    get: operations['getRecruitListAsHelper'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/recruits/customer': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 고객의 동행 목록 조회
     * @description 로그인한 고객이 신청한 동행 목록(진행중/완료)을 조회합니다.
     */
    get: operations['getRecruitListAsCustomer'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/helpers/{helperProfileId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 도우미 상세 조회
     * @description helperProfileId에 해당하는 도우미의 상세 정보를 조회합니다.
     */
    get: operations['getHelperDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['me'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description 공통 응답 포맷 */
    ResponseVoid: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: unknown;
    };
    /** @description 동행 정보 */
    EscortDetail: {
      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate?: string;
      /**
       * @description 만나는 시각
       * @example 09:30:00
       */
      estimatedMeetingTime?: string;
      /**
       * @description 복귀 시각
       * @example 12:30:00
       */
      estimatedReturnTime?: string;
      /**
       * @description 동행 목적
       * @example 정기 진료
       */
      purpose?: string;
      /**
       * @description 기타 요청사항
       * @example 약 수령도 대신 부탁드립니다.
       */
      extraRequest?: string;
    };
    /** @description 위치 정보 */
    LocationDetail: {
      /**
       * @description 장소 이름
       * @example 세종시청
       */
      placeName?: string;
      /**
       * @description 시/도
       * @example 서울
       */
      upperAddrName?: string;
      /**
       * @description 시/군/구
       * @example 강서구
       */
      middleAddrName?: string;
      /**
       * @description 읍/면/동
       * @example 보람동
       */
      lowerAddrName?: string;
      /**
       * @description 지번 본번
       * @example 123
       */
      firstAddrNo?: string;
      /**
       * @description 지번 부번
       * @example 45
       */
      secondAddrNo?: string;
      /**
       * @description 도로명
       * @example 보람로
       */
      roadName?: string;
      /**
       * @description 건물 본번
       * @example 123
       */
      firstBuildingNo?: string;
      /**
       * @description 건물 부번
       * @example 2
       */
      secondBuildingNo?: string;
      /**
       * @description 상세 주소
       * @example 세종시청 본관 3층
       */
      detailAddress?: string;
      /**
       * @description 경도 (Longitude)
       * @example 127.2581225
       */
      longitude?: number;
      /**
       * @description 위도 (Latitude)
       * @example 36.4809912
       */
      latitude?: number;
    };
    /** @description 환자 상태 정보 */
    PatientDetail: {
      /**
       * @description 환자 이미지 URL
       * @example https://example.com/patient.png
       */
      imageUrl?: string;
      /**
       * @description 환자 이름
       * @example 홍길동
       */
      name?: string;
      /**
       * Format: int32
       * @description 환자 나이
       * @example 81
       */
      age?: number;
      /**
       * @description 환자 성별
       * @example 남자
       */
      gender?: string;
      /**
       * @description 환자 연락처
       * @example 010-1234-5678
       */
      phoneNumber?: string;
      /**
       * @description 부축이 필요한지
       * @example true
       */
      needsHelping?: boolean;
      /**
       * @description 휠체어를 이용하고 있는지
       * @example true
       */
      usesWheelchair?: boolean;
      /**
       * @description 인지능력 이슈가 있는지
       * @example true
       */
      hasCognitiveIssue?: boolean;
      /**
       * @description 인지능력 이슈가 있다면, 디테일 설명
       * @example ['판단에 도움이 필요해요', '기억하거나 이해하는 것이 어려워요]
       */
      cognitiveIssueDetail?: string[];
      /**
       * @description 의사소통 이슈가 있는지
       * @example true
       */
      hasCommunicationIssue?: boolean;
      /**
       * @description 의사소통 이슈가 있다면, 디테일 설명
       * @example 이가 많이 없으셔서.. 천천히 이야기 들어주세요
       */
      communicationIssueDetail?: string;
    };
    /** @description 동행 신청 요청 DTO */
    RecruitCreateRequest: {
      patientDetail?: components['schemas']['PatientDetail'];
      escortDetail?: components['schemas']['EscortDetail'];
      meetingLocationDetail?: components['schemas']['LocationDetail'];
      destinationDetail?: components['schemas']['LocationDetail'];
      returnLocationDetail?: components['schemas']['LocationDetail'];
    };
    /** @description 환자 상태 정보 */
    CertificateInfo: {
      /**
       * @description 자격증 이미지 URL
       * @example https://example.com/certificate.png
       */
      imageUrl?: string;
      /**
       * @description 자격증 종류
       * @example 간호조무사
       */
      type?: string;
    };
    /** @description 도우미 프로필 등록 요청 DTO */
    HelperProfileCreateRequest: {
      /**
       * @description 도우미 프로필 이미지 URL
       * @example https://example.com/helper.png
       */
      imageUrl?: string;
      /**
       * @description 강점 목록
       * @example ['안전한 부축으로 편안한 이동', '인지 장애 어르신 맞춤 케어']
       */
      strengthList?: string[];
      /**
       * @description 한 줄 소개
       * @example 부모님처럼 모시겠습니다!
       */
      shortBio?: string;
      /**
       * @description 만족도
       * @enum {string}
       */
      area?:
        | '서울'
        | '부산'
        | '대구'
        | '인천'
        | '광주'
        | '대전'
        | '울산'
        | '세종시'
        | '경기'
        | '강원'
        | '충북'
        | '충남'
        | '전북'
        | '전남'
        | '경북'
        | '경남'
        | '제주';
      /** @description 자격증 정보 목록 */
      certificateInfoList?: components['schemas']['CertificateInfo'][];
    };
    LoginRequest: {
      loginId?: string;
      password?: string;
    };
    LoginResponse: {
      /** Format: int64 */
      userId?: number;
      username?: string;
    };
    /** @description 공통 응답 포맷 */
    ResponseLoginResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['LoginResponse'];
    };
    /** @description 지원 목록 조회 응답 DTO */
    ApplicationListResponse: {
      /** @description 지원 목록 */
      applicationList: components['schemas']['ApplicationSimpleResponse'][];
    };
    /** @description 지원 정보 요약본 응답 DTO */
    ApplicationSimpleResponse: {
      /**
       * Format: int64
       * @description 지원 ID
       */
      applicationId: number;
      /** @description 도우미 요약 정보 */
      helper: components['schemas']['HelperSimpleResponse'];
    };
    /** @description 도우미 정보 요약본 응답 DTO */
    HelperSimpleResponse: {
      /**
       * Format: int64
       * @description 도우미 프로필 ID
       */
      helperProfileId: number;
      /** @description 프로필 이미지 URL */
      imageUrl: string;
      /** @description 성명 */
      name: string;
      /**
       * @description 성별
       * @enum {string}
       */
      gender: '남자' | '여자';
      /**
       * Format: int32
       * @description 나이
       */
      age: number;
      /** @description 한 줄 소개 */
      shortBio?: string;
      /** @description 연락처 */
      contact: string;
      /** @description 자격증 목록 */
      certificateList: string[];
      /** @description 강점 목록 */
      strengthList: string[];
    };
    /** @description 공통 응답 포맷 */
    ResponseApplicationListResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['ApplicationListResponse'];
    };
    /** @description 공통 응답 포맷 */
    ResponseReviewSimpleResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['ReviewSimpleResponse'];
    };
    /** @description 도우미 후기 요약 정보 DTO */
    ReviewSimpleResponse: {
      /**
       * Format: int64
       * @description 리뷰 ID
       */
      reviewId: number;
      /**
       * @description 만족도
       * @enum {string}
       */
      satisfactionLevel: '좋았어요' | '괜찮아요' | '아쉬워요';
      /**
       * Format: date-time
       * @description 작성일
       */
      createdAt: string;
      /**
       * @description 긍정 피드백 목록
       * @example ['친절해요', '리포트가 자세해요']
       */
      positiveFeedbackList: string[];
      /** @description 한 줄 코멘트 */
      shortComment?: string;
    };
    /** @description 리포트 상세 정보 응답 DTO */
    ReportDetailResponse: {
      /**
       * Format: int64
       * @description 리포트 ID
       */
      reportId: number;
      /** @description 실제 만남 시각 */
      actualMeetingTime: string;
      /** @description 실제 복귀 시각 */
      actualReturnTime: string;
      /**
       * Format: int32
       * @description 초과한 시간
       */
      extraMinutes: number;
      /** @description 다음 예약 존재 여부 */
      hasNextAppointment: boolean;
      /**
       * Format: date-time
       * @description 다음 예약 시각
       */
      nextAppointmentTime?: string;
      /** @description 전달 내용 */
      description?: string;
      /**
       * Format: int32
       * @description 기존 결제금액
       */
      baseFee: number;
      /**
       * Format: int32
       * @description 택시 요금
       */
      taxiFee: number;
      /**
       * Format: int32
       * @description 이용 시간 초과 요금
       */
      extraTimeFee: number;
    };
    /** @description 공통 응답 포맷 */
    ResponseReportDetailResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['ReportDetailResponse'];
    };
    /** @description 동행 목록 검색용 응답 DTO */
    RecruitSearchListResponse: {
      /** @description 날짜별 모집 중인 동행 목록 */
      inProgressMap: {
        [key: string]: components['schemas']['RecruitSimpleResponse'][];
      };
    };
    /** @description 동행 신청 정보 요약본 응답 DTO */
    RecruitSimpleResponse: {
      /**
       * Format: int64
       * @description 동행 신청 ID
       */
      recruitId: number;
      /**
       * Format: int64
       * @description 동행중인 경우, 동행 ID
       */
      escortId?: number;
      /**
       * @description 동행 신청의 진행 상태
       * @enum {string}
       */
      status:
        | 'MATCHING'
        | 'COMPLETED'
        | 'IN_PROGRESS'
        | 'MEETING'
        | 'HEADING_TO_HOSPITAL'
        | 'IN_TREATMENT'
        | 'RETURNING'
        | 'DONE';

      /**
       * Format: int64
       * @description 지원한 도우미 수
       */
      numberOfApplication: number;
      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate: string;
      /**
       * @description 만나는 시각
       * @example 09:30:00
       */
      estimatedMeetingTime: string;
      /**
       * @description 복귀 시각
       * @example 12:30:00
       */
      estimatedReturnTime: string;
      /** @description 만나는 장소 */
      departureLocation: string;
      /** @description 목적지 병원 */
      destination: string;
      /**
       * Format: int32
       * @description 예상 급여
       * @example 123000
       */
      estimatedPayment: number;
      /**
       * @description 부축이 필요한지
       * @example true
       */
      needsHelping: boolean;
      /**
       * @description 휠체어를 이용하고 있는지
       * @example true
       */
      usesWheelchair: boolean;
      /**
       * @description 인지능력 이슈가 있는지
       * @example true
       */
      hasCognitiveIssue: boolean;
      /**
       * @description 의사소통 이슈가 있는지
       * @example true
       */
      hasCommunicationIssue: boolean;
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitSearchListResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitSearchListResponse'];
    };
    /** @description 장소 요약 정보 DTO */
    LocationInfoSimpleResponse: {
      /**
       * Format: int64
       * @description 장소 ID
       */
      locationInfoId: number;
      /** @description 장소명(상호명 주소) */
      placeName: string;
      /** @description 도로명 주소 */
      address: string;
      /** @description 상세 주소 */
      detailAddress: string;
    };
    /** @description 환자 요약 정보 조회 응답 DTO */
    PatientSimpleResponse: {
      /**
       * Format: int64
       * @description 환자 ID
       */
      patientId: number;
      /**
       * @description 환자 이미지 URL
       * @example https://example.com/patient.png
       */
      imageUrl: string;
      /**
       * @description 환자 이름
       * @example 홍길동
       */
      name: string;
      /**
       * Format: int32
       * @description 환자 나이
       * @example 81
       */
      age: number;
      /**
       * @description 환자 성별
       * @example 남자
       */
      gender: string;
      /**
       * @description 환자 연락처
       * @example 010-1234-5678
       */
      phoneNumber: string;
      /**
       * @description 부축이 필요한지
       * @example true
       */
      needsHelping: boolean;
      /**
       * @description 휠체어를 이용하고 있는지
       * @example true
       */
      usesWheelchair: boolean;
      /**
       * @description 인지능력 이슈가 있는지
       * @example true
       */
      hasCognitiveIssue: boolean;
      /**
       * @description 인지능력 이슈가 있다면, 디테일 설명
       * @example ['판단에 도움이 필요해요', '기억하거나 이해하는 것이 어려워요]
       */
      cognitiveIssueDetail?: string[];
      /**
       * @description 의사소통 이슈가 있는지
       * @example true
       */
      hasCommunicationIssue: boolean;
      /**
       * @description 의사소통 이슈가 있다면, 디테일 설명
       * @example 이가 많이 없으셔서.. 천천히 이야기 들어주세요
       */
      communicationIssueDetail?: string;
    };
    /** @description 동행 신청 상세 정보 조회 응답 DTO */
    RecruitDetailResponse: {
      /**
       * Format: int64
       * @description 동행 신청 ID
       */
      recruitId: number;
      /**
       * @description 동행 신청의 진행 상태
       * @enum {string}
       */
      status:
        | 'MATCHING'
        | 'COMPLETED'
        | 'IN_PROGRESS'
        | 'MEETING'
        | 'HEADING_TO_HOSPITAL'
        | 'IN_TREATMENT'
        | 'RETURNING'
        | 'DONE';

      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate: string;
      /**
       * @description 만나는 시각
       * @example 09:30:00
       */
      estimatedMeetingTime: string;
      /**
       * @description 복귀 시각
       * @example 12:30:00
       */
      estimatedReturnTime: string;
      /** @description 경로 요약 정보 */
      route: components['schemas']['RouteSimpleResponse'];
      /** @description 환자 요약 정보 */
      patient: components['schemas']['PatientSimpleResponse'];
      /** @description 동행 목적 */
      purpose?: string;
      /** @description 요청 사항 */
      extraRequest?: string;
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitDetailResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitDetailResponse'];
    };
    /** @description 경로 요약 정보 DTO */
    RouteSimpleResponse: {
      /**
       * Format: int64
       * @description 경로 ID
       */
      routeId: number;
      /** @description 만남 장소 위치 정보 */
      meetingLocationInfo: components['schemas']['LocationInfoSimpleResponse'];
      /** @description 병원 위치 정보 */
      hospitalLocationInfo: components['schemas']['LocationInfoSimpleResponse'];
      /** @description 복귀 장소 위치 정보 */
      returnLocationInfo: components['schemas']['LocationInfoSimpleResponse'];
    };
    /** @description 동행 신청 결제 정보 조회 응답 DTO */
    RecruitPaymentResponse: {
      /**
       * Format: int64
       * @description 동행 신청 ID
       */
      recruitId: number;
      /** @description 경로 요약 정보 */
      route: components['schemas']['RouteSimpleResponse'];
      /**
       * Format: int32
       * @description 기본 결제 금액
       */
      baseFee: number;
      /**
       * Format: int32
       * @description 예상 택시 요금
       */
      expectedTaxiFee: number;
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitPaymentResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitPaymentResponse'];
    };
    /** @description 이전 동행 신청 정보 상세 응답 DTO */
    RecruitHistoryDetailResponse: {
      patientDetail?: components['schemas']['PatientDetail'];
      meetingLocationDetail?: components['schemas']['LocationDetail'];
      destinationDetail?: components['schemas']['LocationDetail'];
      returnLocationDetail?: components['schemas']['LocationDetail'];
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitHistoryDetailResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitHistoryDetailResponse'];
    };
    /** @description 이전 동행 목록 조회 응답 DTO */
    RecruitHistoryListResponse: {
      /** @description 이전 동행 목록 */
      beforeList: components['schemas']['RecruitHistorySimpleResponse'][];
    };
    /** @description 이전 동행 신청 정보 요약본 응답 DTO */
    RecruitHistorySimpleResponse: {
      /**
       * Format: int64
       * @description 동행 신청 ID
       */
      recruitId: number;
      /**
       * @description 환자 이름
       * @example 홍길동
       */
      name: string;
      /** @description 목적지 병원 */
      destination: string;
      /**
       * Format: date
       * @description 동행 날짜
       * @example 2025-08-01
       */
      escortDate: string;
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitHistoryListResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitHistoryListResponse'];
    };
    /** @description 동행 목록 조회 응답 DTO */
    RecruitListResponse: {
      /** @description 진행 중인 동행 목록 */
      inProgressList: components['schemas']['RecruitSimpleResponse'][];
      /** @description 완료된 동행 목록 */
      completedList: components['schemas']['RecruitSimpleResponse'][];
    };
    /** @description 공통 응답 포맷 */
    ResponseRecruitListResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['RecruitListResponse'];
    };
    /** @description 도우미 상세 정보 응답 DTO */
    HelperDetailResponse: {
      /** @description 도우미 요약 정보 */
      helperSimple: components['schemas']['HelperSimpleResponse'];
      /**
       * Format: int64
       * @description 총 동행자 수
       */
      escortCount: number;
      /** @description 도우미 리뷰 통계 */
      reviewStat: components['schemas']['ReviewStatResponse'];
      /** @description 후기 키워드 통계 목록 */
      positiveFeedbackStatList: components['schemas']['PositiveFeedbackStatResponse'][];
      /** @description 최신 후기 리스트 */
      latestReviewList: components['schemas']['ReviewSimpleResponse'][];
    };
    /** @description 도우미 후기 좋았던점 통계 DTO */
    PositiveFeedbackStatResponse: {
      /**
       * @description 좋았던점 키워드
       * @example 친절해요
       */
      description: string;
      /**
       * Format: int64
       * @description 해당 키워드의 개수
       * @example 12
       */
      count: number;
    };
    /** @description 공통 응답 포맷 */
    ResponseHelperDetailResponse: {
      /**
       * Format: int32
       * @description 직접 정의한 응답에 대한 code
       */
      code: number;
      /**
       * Format: int32
       * @description 응답 상태에 대한 HTTP 상태 코드
       * @example 200
       */
      status: number;
      /**
       * @description 응답 상태에 대한 HTTP 메시지
       * @example SUCCESS
       */
      message: string;
      /** @description 응답 body 필드 */
      data?: components['schemas']['HelperDetailResponse'];
    };
    /** @description 도우미 리뷰 통계 정보 DTO */
    ReviewStatResponse: {
      /**
       * Format: int64
       * @description 총 리뷰 개수
       */
      reviewCount: number;
      /**
       * Format: int32
       * @description 좋았어요 비율
       */
      goodRate: number;
      /**
       * Format: int32
       * @description 괜찮아요 비율
       */
      averageRate: number;
      /**
       * Format: int32
       * @description 아쉬워요 비율
       */
      badRate: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getReportAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 리포트 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseReportDetailResponse'];
        };
      };
    };
  };
  createReportOnRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 리포트 등록 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  getRecruitListBySearch: {
    parameters: {
      query?: {
        area?: string;
        startDate?: string;
        endDate?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 지원 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitSearchListResponse'];
        };
      };
    };
  };
  createRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['RecruitCreateRequest'];
      };
    };
    responses: {
      /** @description 동행 신청 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  createHelperProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['HelperProfileCreateRequest'];
      };
    };
    responses: {
      /** @description 도우미 프로필 등록 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseLoginResponse'];
        };
      };
    };
  };
  selectApplication: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        applicationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지원 선택 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseApplicationListResponse'];
        };
      };
    };
  };
  getApplicationListAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지원 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseApplicationListResponse'];
        };
      };
    };
  };
  applyApplicationToRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 지원 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  cancelRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 신청 취소 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  cancelApplicationToRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        applicationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 지원 취소 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  getReviewAsRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 도우미 리뷰 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseReviewSimpleResponse'];
        };
      };
    };
  };
  getReportDefaultValueOnRecruit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 리포트 등록에 필요한 기본값 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseVoid'];
        };
      };
    };
  };
  getRecruitDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 신청 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitDetailResponse'];
        };
      };
    };
  };
  getRecruitPayment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 신청 결제 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitPaymentResponse'];
        };
      };
    };
  };
  getRecruitHistory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recruitId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 이전 환자(동행)에 대한 기록 조회 성공  */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitHistoryDetailResponse'];
        };
      };
    };
  };
  getRecruitHistoryList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 이전 환자(동행) 정보 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitHistoryListResponse'];
        };
      };
    };
  };
  getRecruitListAsHelper: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitListResponse'];
        };
      };
    };
  };
  getRecruitListAsCustomer: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 동행 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseRecruitListResponse'];
        };
      };
    };
  };
  getHelperDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        helperProfileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 도우미 상세 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseHelperDetailResponse'];
        };
      };
    };
  };
  me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseLoginResponse'];
        };
      };
    };
  };
}
